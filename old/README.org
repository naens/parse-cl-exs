#+TITLE: parse-cl-exs

Exercises and examples related to parsing in Common Lisp

* Overview

Here I would like to post exercises I do while studying parsing.  Parsing is
an interesting thing.  It's necessary thing for a lot of things.

In this project I will use a special grammar for grammar description, so
that it can be read directly using Common Lisp macros.

There are two parts in this project:
1) Convert a string of text into something which can be better understood by
Common Lisp.

For example, we have a ~C~ function:

#+BEGIN_SRC C
int abc(char *str, int len)
{
  if (len > 1)
    return 1;
  else
    return 0;
}
#+END_SRC

This should look like tokens, so after this phase, it will look like

#+BEGIN_SRC
<type:int><id:abc><par-op><type:char><star><id:str><comma>
                          <type:int><id:len><par-close>
<brace-op>
<if><par-op><id:len><gt><nlit:1><par-close>
<return><nlit:1><semi-colon>
<else>
<return><nlit:0><semicolon>
<brace-close>
#+END_SRC

So it's not so much parsing, it doesn't have to understand the difference
between function and variable names, whether ~if~ and ~else~ are in right
positions or not.  The purpose is to differentiate between items that are in
the grammar.  For example, the grammar says that you can put a string
literal or a variable as an argument for a function, so this phase will
determine where the strings literals or variables are and what for
names/content ("values") they have.

So a token can have a value (variables, literals) and no value (key
words, syntax elements).

The purpose of this phase is to produce al list of Lisp objects (well, not
OO objects, but structures).

2) Different parsing techniques described in the /Parsing Techniques/ book. 
I don't think I will be able to all the techniques, because there are a lot
and they have different properties.  The most important will be when they
can produce an EBNF syntax tree because EBNF grammars are shorter and easier
to read.  Average grammars are long enough, so if it's possible to make them
a bit shorter by making the parser a little bit longer, it should be done.

I would like to write parsers for most of the different types.
